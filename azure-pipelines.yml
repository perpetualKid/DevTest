trigger: 
    none

stages:
- stage: Prep
  jobs:
  - job: GetVersion
    pool:
      vmImage: 'windows-latest'
    steps:
    - checkout: none

    - task: PowerShell@2
      displayName: Get the version from directory.builds.props
      name: setVariableStep
      inputs:
        targetType: 'inline'
        script: |
          [string] $version = $env:originVersion 
          Write-Host "Updating the value of the buildVersion to '$version'."
          Write-Host "##vso[task.setvariable variable=versionFromCode;isOutput=true;]$version";
          Write-Host "##vso[task.setvariable variable=pipelineVersionFromCode;isOutput=true;]$version";

    - task: PowerShell@2
      displayName: Show the version
      name: setVariableStep2
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "Current versionFromCode is '$(setVariableStep.versionFromCode)'."
          Write-Host "Current pipelineVersionFromCode is '$(setVariableStep.pipelineVersionFromCode)'."
          Write-Host "##vso[task.setvariable variable=pipelineVersionFromCode;isOutput=true;]Reset";


    - task: PowerShell@2
      displayName: Show another version
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "Current versionFromCode is '$(setVariableStep.versionFromCode)'."
          Write-Host "Current pipelineVersionFromCode is '$(setVariableStep.pipelineVersionFromCode)'."
          Write-Host "Current pipelineVersionFromCode2 is '$(setVariableStep2.pipelineVersionFromCode)'."


  - job: TestingVariables
    dependsOn: GetVersion
    pool:
      vmImage: 'windows-latest'
    variables:
#      system.debug: true
      code1: $[dependencies.GetVersion.outputs['setVariableStep2.pipelineVersionFromCode']]
      code2: $[dependencies.GetVersion.outputs['setVariableStep.pipelineVersionFromCode']]
      version1:  $[counter(variables['code1'], 0)]
      version2:  $[counter(variables['code2'], 0)]

     
      environment2:  $[if ne( variables['channel'], '' ) 'empty'

      ${{ if ne( variables['channel'], '' ) }}: 
        environment: 'empty'
      ${{ if eq( variables['channel'], '' ) }}: 
        environment: $(channel)-variables['channel']

    steps:
#    - checkout: none
    - task: PowerShell@2
      displayName: Set the name of the build
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "Current version1 is '$(version1)', '$(code1)'."
          Write-Host "Current version2 is '$(version2)', '$(code2)'."
          Write-Host "Current version1 is '$(environment)', '$(environment2)'."
          $html = git log --pretty=format:"%h|%ad|%an|%s" --date=format:"%Y-%m-%dT%H:%MZ" -100 | ConvertFrom-Csv -Delimiter "|" -Header "Commit", "Date", "Author", "Message" | ConvertTo-Html -title "Open Rails Commit History Channel=$(channel) Version=$(version1)" -Property @{Label="Link";Expression={"<a href=''$($githubUrl)$($_.Commit)''>$($_.Commit)</a>"}}, Date, Author, Message
          [System.Net.WebUtility]::HtmlDecode($html) | Out-File $(Build.ArtifactStagingDirectory)/history.html